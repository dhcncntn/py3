import asyncio
import aiohttp
import base64
import json
import os
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7772734850:AAE7h2N9yZSaQv68u2EnpBH0J6yv7dbbvCw"
GEMINI_API_KEY = "AIzaSyBZfx8a3cx9oTLFLcdhceaOqGjwBWGuUDw"
PROXY_URL = "http://grib:work7315@45.140.211.222:50100"
DEFAULT_MODEL = "gemini-2.0-flash"
DATA_FILE = "saved_chats.json"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
class ChatStates(StatesGroup):
    normal = State()
    waiting_for_caption = State()
    waiting_for_chat_name = State()
    choosing_chat = State()
    deleting_chat = State()

# === –î–ê–ù–ù–´–ï ===
user_data = {}
saved_chats = {}

def load_saved_chats():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            saved_chats.update(json.load(f))

def save_chats():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(saved_chats, f, ensure_ascii=False, indent=2)

load_saved_chats()

# === –ö–ù–û–ü–ö–ò ===
def get_main_keyboard():
    kb = [
        [KeyboardButton(text="üÜï –ù–æ–≤—ã–π —á–∞—Ç"), KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")],
        [KeyboardButton(text="üìÇ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")],
        [KeyboardButton(text="üß† –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_chat_choice_keyboard(user_id):
    chats = saved_chats.get(str(user_id), {})
    keyboard = [[KeyboardButton(text=name)] for name in sorted(chats.keys())]
    keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

model_options = [
    "gemini-2.0-flash",
    "gemini-1.5-flash",
    "gemini-1.5-pro",
    
   
]

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ===
def estimate_tokens(text):
    return len(text.split()) * 1.5

def trim_history(history, max_tokens=8000):
    total_tokens = 0
    trimmed = []
    for item in reversed(history):
        content = item["parts"][0].get("text", "") if item["parts"] else ""
        total_tokens += estimate_tokens(content)
        trimmed.insert(0, item)
        if total_tokens > max_tokens:
            trimmed = trimmed[1:]
    return trimmed

async def send_reply(chat_id: int, text: str):
    if not text:
        await bot.send_message(chat_id, "‚ùó –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
    else:
        await bot.send_message(chat_id, text)
    await bot.send_message(chat_id, "‚úÖ –û—Ç–≤–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω.")

async def analyze(user_id: int, text: str = None, image_data: bytes = None):
    if user_id not in user_data:
        user_data[user_id] = {"history": [], "model": DEFAULT_MODEL}

    parts = []
    prompt = "–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –†–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ."

    if image_data:
        parts.append({"text": prompt})
        parts.append({
            "inline_data": {
                "mime_type": "image/jpeg",
                "data": base64.b64encode(image_data).decode("utf-8")
            }
        })
        if text:
            parts.append({"text": text})
    elif text:
        parts.append({"text": prompt + "\n" + text})
    else:
        return "‚ùó –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å."

    user_data[user_id]["history"].append({"role": "user", "parts": parts})
    user_data[user_id]["history"] = trim_history(user_data[user_id]["history"])

    payload = {
        "contents": user_data[user_id]["history"],
        "generationConfig": {"maxOutputTokens": 2000, "temperature": 0.5}
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://generativelanguage.googleapis.com/v1beta/models/{user_data[user_id]['model']}:generateContent?key={GEMINI_API_KEY}",
                json=payload,
                proxy=PROXY_URL
            ) as resp:
                data = await resp.json()
                text = data["candidates"][0]["content"]["parts"][0]["text"]
                user_data[user_id]["history"].append({"role": "model", "parts": [{"text": text}]})
                return text
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_data[message.from_user.id] = {"history": [], "model": DEFAULT_MODEL}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=get_main_keyboard())
    await state.set_state(ChatStates.normal)

@dp.message(F.text.startswith("üß† –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å"))
async def change_model(message: Message):
    current = user_data[message.from_user.id]["model"]
    idx = model_options.index(current)
    new_model = model_options[(idx + 1) % len(model_options)]
    user_data[message.from_user.id]["model"] = new_model
    await message.answer(f"–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {new_model}", reply_markup=get_main_keyboard())

@dp.message(F.text == "üÜï –ù–æ–≤—ã–π —á–∞—Ç")
async def new_chat(message: Message, state: FSMContext):
    user_data[message.from_user.id]["history"] = []
    await message.answer("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç.")

@dp.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
async def end_chat(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞:")
    await state.set_state(ChatStates.waiting_for_chat_name)

@dp.message(ChatStates.waiting_for_chat_name)
async def save_chat(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    saved_chats.setdefault(user_id, {})[name] = user_data[message.from_user.id]
    save_chats()
    await message.answer(f"–ß–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ <b>{name}</b>.", reply_markup=get_main_keyboard())
    await state.set_state(ChatStates.normal)

@dp.message(F.text == "üìÇ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç")
async def choose_chat(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user_id not in saved_chats or not saved_chats[user_id]:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Ç:", reply_markup=get_chat_choice_keyboard(user_id))
        await state.set_state(ChatStates.choosing_chat)

@dp.message(ChatStates.choosing_chat)
async def handle_chat_selection(message: Message, state: FSMContext):
    name = message.text.strip()
    if name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ú–µ–Ω—é", reply_markup=get_main_keyboard())
        await state.set_state(ChatStates.normal)
        return
    user_id = str(message.from_user.id)
    if name in saved_chats.get(user_id, {}):
        user_data[message.from_user.id] = saved_chats[user_id][name]
        await message.answer(f"–ß–∞—Ç <b>{name}</b> –≤—ã–±—Ä–∞–Ω.", reply_markup=get_main_keyboard())
    else:
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.set_state(ChatStates.normal)

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")
async def delete_chat_prompt(message: Message, state: FSMContext):
    await message.answer("–ò–º—è —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(ChatStates.deleting_chat)

@dp.message(ChatStates.deleting_chat)
async def delete_chat(message: Message, state: FSMContext):
    name = message.text.strip()
    user_id = str(message.from_user.id)
    if name in saved_chats.get(user_id, {}):
        del saved_chats[user_id][name]
        save_chats()
        await message.answer(f"–ß–∞—Ç <b>{name}</b> —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.set_state(ChatStates.normal)

@dp.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            image_data = await resp.read()
    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
    response = await analyze(message.from_user.id, image_data=image_data)
    await send_reply(message.chat.id, response)

@dp.message(ChatStates.normal)
async def handle_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if text in ["üÜï –ù–æ–≤—ã–π —á–∞—Ç", "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "üìÇ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç"]:
        return
    await message.answer("–î—É–º–∞—é...")
    response = await analyze(message.from_user.id, text=text)
    await send_reply(message.chat.id, response)

# === –ó–ê–ü–£–°–ö ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
